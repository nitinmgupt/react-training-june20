{"ast":null,"code":"var _jsxFileName = \"C:\\\\africa\\\\my-git-code\\\\react-training-june20\\\\react-apps\\\\myapp01\\\\src\\\\components\\\\class-to-hoc\\\\cls-hoc.js\";\nimport React from 'react'; //import React, {Component} from 'react';\n// Way-1\n\n/*class  MyContainerComm extends Component{\r\n    render() {\r\n        return <Intermediate mytext=\"What is react??\" />;\r\n    }\r\n}\r\n\r\nclass  Intermediate extends Component{\r\n    render() {\r\n        // Intermediate doesn't care about \"text\", but just passes it down.\r\n        return <Child mytext={this.props.mytext} />;\r\n    }\r\n}\r\n\r\nclass  Child extends Component{\r\n    render() {\r\n        return <span>{this.props.mytext}</span>;\r\n    }\r\n}*/\n// Way-2\n\nlet MyContainerComm = props => /*#__PURE__*/React.createElement(Intermediate, {\n  mytext: \"What is react??\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 31\n  }\n});\n\nlet Intermediate = props => /*#__PURE__*/React.createElement(Child, {\n  mytext: props.mytext,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 27\n  }\n});\n\nlet Child = props => /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 20\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 26\n  }\n}, props.mytext));\n\nexport default MyContainerComm; //ReactDOM.render(<MyContainerComm />, document.getElementById('content'));\n//A higher-order component (HOC) is an advanced technique in React for reusing component logic.\n// They are a pattern that emerges from React's compositional nature.\n// Concretely, a higher-order component is a function that takes a component and returns a new component.","map":{"version":3,"sources":["C:/africa/my-git-code/react-training-june20/react-apps/myapp01/src/components/class-to-hoc/cls-hoc.js"],"names":["React","MyContainerComm","props","Intermediate","mytext","Child"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA;;;;;;;;;;;;;;;;;;AAmBA;;AACA,IAAIC,eAAe,GAAEC,KAAD,iBAAU,oBAAC,YAAD;AAAc,EAAA,MAAM,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA9B;;AAEA,IAAIC,YAAY,GAAED,KAAD,iBAAS,oBAAC,KAAD;AAAO,EAAA,MAAM,EAAEA,KAAK,CAACE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA1B;;AAEA,IAAIC,KAAK,GAAEH,KAAD,iBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKA,KAAK,CAACE,MAAX,CAAN,CAAnB;;AAEA,eAAeH,eAAf,C,CAGA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\n//import React, {Component} from 'react';\r\n\r\n// Way-1\r\n/*class  MyContainerComm extends Component{\r\n    render() {\r\n        return <Intermediate mytext=\"What is react??\" />;\r\n    }\r\n}\r\n\r\nclass  Intermediate extends Component{\r\n    render() {\r\n        // Intermediate doesn't care about \"text\", but just passes it down.\r\n        return <Child mytext={this.props.mytext} />;\r\n    }\r\n}\r\n\r\nclass  Child extends Component{\r\n    render() {\r\n        return <span>{this.props.mytext}</span>;\r\n    }\r\n}*/\r\n\r\n// Way-2\r\nlet MyContainerComm=(props)=>(<Intermediate mytext=\"What is react??\" />)\r\n\r\nlet Intermediate=(props)=><Child mytext={props.mytext} />\r\n\r\nlet Child=(props)=><span><h2>{props.mytext}</h2></span>\r\n\r\nexport default MyContainerComm ;\r\n\r\n\r\n//ReactDOM.render(<MyContainerComm />, document.getElementById('content'));\r\n//A higher-order component (HOC) is an advanced technique in React for reusing component logic.\r\n// They are a pattern that emerges from React's compositional nature.\r\n// Concretely, a higher-order component is a function that takes a component and returns a new component."]},"metadata":{},"sourceType":"module"}